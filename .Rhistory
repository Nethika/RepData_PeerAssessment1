library("jpeg")
install.packages("jpeg")
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile='pic.jpg')
picture <- readJPEG('pic.jpg', native = TRUE)
quantile(picture, c(0.3, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",destfile='gdp.csv')
gdp<-read.csv("gdp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile='edu.csv')
edu<-read.csv("edu.csv")
View(edu)
View(gdp)
merged <- merge(gdp, edu, all = TRUE, by = "CountryCode")
View(edu)
gdp <- read.csv(fname, skip = 4, nrows = 215) %>%
subset(!is.na(X) & X != "", select = c("X", "X.1", "X.3", "X.4")) %>%
rename(CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
gdp <- read.csv("gdp.csv", skip = 4, nrows = 215) %>% subset(!is.na(X) & X != "", select = c("X", "X.1", "X.3", "X.4")) %>% rename(CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
gdp <- read.csv("gdp.csv", skip = 4, nrows = 215)
gdp <- subset(gdp,!is.na(X) & X != "", select = c("X", "X.1", "X.3", "X.4"))
gdp <- rename(gdp,CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
library(dplyr)
gdp <- rename(gdp,CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
View(gdp)
merged <- merge(gdp, edu, all = TRUE, by = "CountryCode")
sum(!is.na(unique(merged$rankingGDP)))
sorted <- subset(merged, select = c(rankingGDP, Long.Name.x))
sorted[order(answer3.2$rankingGDP, decreasing = TRUE), "Long.Name.x"][13]
sorted[order(sorted$rankingGDP, decreasing = TRUE), "Long.Name.x"][13]
avg_rank <- function(label) {
income_group <- subset(merged, merged$Income.Group == label)
mean(as.numeric(income_group$rankingGDP), na.rm = TRUE)
}
answer4.oecd <- avg_rank("High income: OECD")
answer4.non.oecd <- avg_rank("High income: nonOECD")
msg("High income OECD:", answer4.oecd, "High income nonOECD:", answer4.non.oecd)
answer4.oecd
answer4.non.oecd
DT <- subset(merged, select = c(Income.Group, rankingGDP)) %>%
mutate(quantileGDP = cut2(rankingGDP, g = 5)) %>%
data.table
install.packages("Hmisc")
library(Hmisc)
DT <- subset(merged, select = c(Income.Group, rankingGDP)) %>%
mutate(quantileGDP = cut2(rankingGDP, g = 5)) %>%
data.table
library(data.table)
DT <- subset(merged, select = c(Income.Group, rankingGDP)) %>%
mutate(quantileGDP = cut2(rankingGDP, g = 5)) %>%
data.table
View(DT)
answer5 <- DT[Income.Group == "Lower middle income", .N,
by = c("Income.Group", "quantileGDP")] %>%
subset(quantileGDP == "[  1, 39)", select = N)
View(answer5)
library(swirl)
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
View(cran)
cran
help(group_by())
help(group_by)
by_package <- group_by(cran,"package")
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
View(by_package)
summarize(by_package,mean(size))
info()
summarize(by_package,size=mean(size))
help("summarize")
library(plyr)
library(Hmisc)
summarize(by_package,size=mean(size))
summarize(by_package,mean(size))
by_package <- group_by(cran,package)
package
by_package
tbl_df
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
pack_sum <- summarize(by_package,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
pack_sum
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
detach("package:plyr", unload=TRUE)
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
library(dplyr)
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
pack_sum <- summarise(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
pack_sum
submit()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs =0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(count))
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
View(result3)
cran %>%
select() %>%
print
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
View(students2)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5").
?parse_number
parse_number(class5).
parse_number
parse_number("$1000")
parse_number("sgsg1000")
parse_number("class1000")
parse_number("class5")
submit()
submit()
students4
getwd()
submit()
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
submit()
?group_by
submit()
Help > Check for Updates
getwd()
polarity= c(0.5481481481481482, 0.4, 0.6000000000000001, -0.05, -0.1, -0.25, -0.033333333333333326, 0.19999999999999998, 0.0, 0.0, 0.5, 0.17777777777777778, 0.0, -0.19999999999999996, 0.0, 0.8, 0.0, 0.0, 0.0, 0.2, -0.15, 0.0, 0.0, 0.0, 0.0, 0.0, -0.275, 0.0, 0.7000000000000001, 0.6, -0.5, 0.0, 0.16, 0.25, 0.0, 0.32727272727272727, 0.0, 0.0, 0.0, 0.0, 0.5, 0.125, 0.08333333333333333, 0.09, 0.15, 0.19545454545454546, 0.12361111111111112, 0.8, -9.25185853854297e-18, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1621212121212121, 0.06888888888888889, 0.0, -0.025568181818181823, 0.0, -0.11215728715728718, 0.0, -0.022857142857142854, 0.0, 0.0, 0.5, 0.675, 0.26666666666666666, 0.3287878787878788, 0.0, 0.575, 0.13636363636363635, 0.2681818181818182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16666666666666669, 0.2, 0.2)
qplot(x=1:length(polarity), y=polarity, geom="bar", xlab="", ylab="polarity", main="Sentiment of Speech")
p <- qplot(,polarity)
p + geom_line() +xlab("sentences")+ ylab("Polarity") + scale_x_continuous(expand = c(0, 0))+theme(axis.title = element_text(size = 25))
dev.copy(png, file="mlk.png", width=2000, height=500)
dev.off()
library(ggplot2)
qplot(x=1:length(polarity), y=polarity, geom="bar", xlab="", ylab="polarity", main="Sentiment of Speech")
p <- qplot(,polarity)
p + geom_line() +xlab("sentences")+ ylab("Polarity") + scale_x_continuous(expand = c(0, 0))+theme(axis.title = element_text(size = 25))
dev.copy(png, file="mlk.png", width=2000, height=500)
dev.off()
qplot(x=1:length(polarity), y=polarity, geom="bar", xlab="", ylab="polarity", main="Sentiment of Speech")
plot_len=length(polarity) *10
p <- qplot(,polarity)
p + geom_line() +xlab("sentences")+ ylab("Polarity") + scale_x_continuous(expand = c(0, 0))+theme(axis.title = element_text(size = 25))+ylim(-1,1)
dev.copy(png, file="mlk.png", width=plot_len, height=500)
dev.off()
polarity= c(0.5481481481481482, 0.4, 0.6000000000000001, -0.05, -0.1, -0.25, -0.033333333333333326, 0.19999999999999998, 0.0, 0.0, 0.5, 0.17777777777777778, 0.0, -0.19999999999999996, 0.0, 0.8, 0.0, 0.0, 0.0, 0.2, -0.15, 0.0, 0.0, 0.0, 0.0, 0.0, -0.275, 0.0, 0.7000000000000001, 0.6, -0.5, 0.0, 0.16, 0.25, 0.0, 0.32727272727272727, 0.0, 0.0, 0.0, 0.0, 0.5, 0.125, 0.08333333333333333, 0.09, 0.15, 0.19545454545454546, 0.12361111111111112, 0.8, -9.25185853854297e-18, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1621212121212121, 0.06888888888888889, 0.0, -0.025568181818181823, 0.0, -0.11215728715728718, 0.0, -0.022857142857142854, 0.0, 0.0, 0.5, 0.675, 0.26666666666666666, 0.3287878787878788, 0.0, 0.575, 0.13636363636363635, 0.2681818181818182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16666666666666669, 0.2, 0.2)
qplot(x=1:length(polarity), y=polarity, geom="bar", xlab="", ylab="polarity", main="Sentiment of Speech")
plot_len=length(polarity) *10
p <- qplot(,polarity)
p + geom_line() +xlab("sentences")+ ylab("Polarity") +theme(axis.title = element_text(size = 25))+ylim(-1,1)
dev.copy(png, file="mlk.png", width=plot_len, height=500)
dev.off()
polarity= c(0.5, 0.1, 0.0, 0.11499999999999999, 0.3666666666666667, 0.175, 0.2833333333333334, 0.35625, 0.13333333333333333, 0.0, 0.3, -0.08333333333333333, 0.0, 1.0, 0.14583333333333334, 0.03721590909090909, 0.17857142857142858, 0.5, 0.125, 0.21428571428571427, 0.09999999999999999, 0.0, 0.06333333333333334, 0.04166666666666668, 0.05555555555555555, 0.3666666666666667, -0.0008503401360544227, 0.0, 0.0, -0.03125, 0.0, 0.55, 0.0, 0.3111111111111111, 0.4083333333333333, 0.275, 0.0, 0.03843537414965986, -0.2380952380952381, 0.0, 0.25, 0.0, 0.025000000000000005, -0.022857142857142864, 0.0, 0.1369047619047619, -0.12083333333333332, 0.2066666666666667, 0.10833333333333335, -0.11458333333333331, -0.06041666666666666, 0.35, -0.07916666666666666, 0.0, 0.0, 0.0, 0.0, 0.1666666666666667, -0.20833333333333331, 0.056666666666666664, 0.0, 0.5, -0.025, 0.0, 0.5, 0.0, 0.2857142857142857, -0.15, 0.175, 0.24, 0.0, -0.225, -0.25, -0.06875, -0.022222222222222216, 0.04166666666666667, 0.06666666666666668, 0.17333333333333334, 0.06666666666666668, -0.125, -0.09999999999999999, 0.375, 0.16666666666666666, 0.05, 0.0, -0.7, -0.175, 0.0, -0.04999999999999999, 0.0, 0.07142857142857142, 0.07500000000000001, -0.0625, -0.2333333333333333, 0.2222222222222222, 0.1, 0.06944444444444443, -0.1875, 0.27999999999999997, -0.4333333333333333, -0.15, 9.25185853854297e-18, 0.6, -0.16666666666666666, -0.02813852813852812, 0.0, 0.2857142857142857, 0.0, 0.07619047619047618, 0.27999999999999997, -0.016666666666666663, 0.175, 0.23809523809523808, 0.525, 0.05, -0.25, 0.08333333333333333, 0.009027777777777801, 0.0, 0.35, 0.0, 0.1395833333333333, -0.2833333333333333, -0.05555555555555555, 0.37777777777777777, 0.0, 0.0, -0.3, 0.0, 0.0, 0.0, 0.16666666666666666, 0.02500000000000001, 0.0, -0.0625, 0.0, 0.0, 0.0, 0.0, -0.03333333333333333, 0.0, -0.2, 0.0, 0.4523809523809524, 0.16666666666666666, 0.35, 0.4, 0.0, 0.0, 1.0, -0.15999999999999998, 0.48333333333333334, 0.06666666666666667, 0.5, 0.1, 0.0, 0.0, 0.26, 0.0, 0.1875, 0.0, -0.375, 0.0, 0.0, 0.25, 0.0, 0.25, -0.041666666666666664, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0054421768707482955, -0.35714285714285715, 0.0, 0.0, 0.5)
qplot(x=1:length(polarity), y=polarity, geom="bar", xlab="", ylab="polarity", main="Sentiment of Speech")
plot_len=length(polarity) *10
p <- qplot(,polarity)
p + geom_line() +xlab("sentences")+ ylab("Polarity") +theme(axis.title = element_text(size = 25))+ylim(-1,1)
dev.copy(png, file="senObama.png", width=plot_len, height=500)
dev.off()
polarity= c(0.3159090909090909, 0.22636363636363638, 0.0, 0.0, 0.0, 0.5, 0.3, 0.0, -0.25, 0.0, 0.0, 0.0, 0.5, 0.17857142857142858, -0.02777777777777779, -0.125, 0.25, 0.0, 0.0, -0.05277777777777779, 0.1625, 0.16666666666666666, 0.0, 0.15555555555555556, 0.0, 0.5, 0.08333333333333333, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.41250000000000003, 0.0, 0.2833333333333333, -0.5, 0.56875, 0.0, 0.0, 0.0, 0.3, 0.15000000000000002, 0.0, 0.0, 0.0, 0.5, -0.3, 0.0, 0.4, -0.044642857142857144, 0.05166666666666667, 0.3, 0.0, -0.041666666666666664, 0.3166666666666667, 0.0, -0.125, -0.4123809523809524, 0.21428571428571427, 0.28214285714285714, 0.0, 0.3333333333333333, 0.175, -0.1, 0.0, 0.0, 0.2611111111111111, -0.16666666666666666, 0.06666666666666667, -0.125, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.35, -0.02182539682539682, 0.0, 0.0, 0.1, 0.0, 0.25, 0.20357142857142854, -0.03333333333333333, 0.11818181818181818, 0.0, 0.6, 0.1, 0.0, 0.1, 0.6, 0.5, -0.3, 0.5, 0.0, 0.2, 0.0, 0.3181818181818182, 0.0, 0.3333333333333333, 0.0, 0.9, 0.2857142857142857, -0.012499999999999997, 0.4166666666666667, 0.5, -0.1875, 0.25, 0.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.19444444444444445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4666666666666666, 0.0, 0.0, 0.1, 0.0, 0.0, 0.85, 0.4166666666666667, 0.02777777777777778, 0.4, 0.18333333333333335)
qplot(x=1:length(polarity), y=polarity, geom="bar", xlab="", ylab="polarity", main="Sentiment of Speech")
plot_len=length(polarity) *10
p <- qplot(,polarity)
p + geom_line() +xlab("sentences")+ ylab("Polarity") +theme(axis.title = element_text(size = 25))+ylim(-1,1)
dev.copy(png, file="preObama.png", width=plot_len, height=500)
dev.off()
polarity= c(0.4, 0.0, 0.125, 0.0, 0.016666666666666677, -0.16666666666666666, 0.09999999999999999, 0.0, -0.25, 0.0, 0.03333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2, -0.3, 0.1, 0.0, 0.0, 0.0, 0.4, 0.4, 0.4, 0.008333333333333331, 0.16666666666666666, 0.0, 0.0, 0.0)
qplot(x=1:length(polarity), y=polarity, geom="bar", xlab="", ylab="polarity", main="Sentiment of Speech")
plot_len=length(polarity) *10
p <- qplot(,polarity)
p + geom_line() +xlab("sentences")+ ylab("Polarity") +theme(axis.title = element_text(size = 25))+ylim(-1,1)
dev.copy(png, file="angela.png", width=plot_len, height=500)
dev.off()
polarity= c(0.04166666666666667, -0.3, -0.051851851851851864, 0.0, 0.4, 0.0, 0.06818181818181818, 0.13636363636363635, -0.24343434343434342, 0.0, 0.2, 0.5444444444444444, 0.0, 0.8, 0.0, 0.6, -0.08333333333333333, -0.05833333333333333, 0.09375, 0.1625, -0.3999999999999999, 0.0, 0.4666666666666666, 0.01607142857142857, 0.2357142857142857, 0.0, 0.04999999999999999, 0.3583333333333334, 0.49318181818181817, -0.36388888888888893, 0.0, 0.0, -0.1875, 0.1715909090909091, 0.0, 0.2202020202020202, 0.0, 0.1625, 0.16753246753246756, 0.06818181818181818, 0.0, 0.06818181818181818, -0.8, -0.2, -0.4, 0.0, 0.0, 0.0, 0.0, 0.4, 0.78, 0.0, -0.6999999999999998, 0.13333333333333333, 0.0, 0.4333333333333333, 0.0, -0.1, 0.0, 0.0, 0.33, 0.0, 0.21212121212121213, -0.2, 0.0, 0.13636363636363635, 0.0, 0.0, 0.16666666666666666, 0.45, 0.4, 0.3, 0.0, 0.0, 0.5, -0.5, 0.06022727272727272, 0.5, 0.05, -0.4375, 0.041666666666666664, -0.025, -0.05, 0.14285714285714285, 0.1, 0.0, 0.0, 0.09159999999999999, 0.4, 0.6, 0.0, 0.7, -0.041666666666666664, -0.07883333333333334, 0.0, 0.0, 0.0, 0.55, 0.125, 0.2857142857142857, 0.8, 0.0, 0.2, 0.13333333333333333, 0.5, 0.16666666666666666, 0.0, 0.25, 0.125, 0.07545454545454545, 0.0, 0.4, 0.13636363636363635, -0.16666666666666666, 0.0, 0.0, 0.04545454545454545, 0.0, 0.25, 0.14285714285714285, 0.4, 0.0, 0.0, 0.0, 0.16666666666666666, 0.0, -0.4, 0.0, 0.1, 0.0, 0.25, 0.09999999999999998, 0.325, -0.05851851851851853, 0.1111111111111111, -0.15000000000000002, 0.0, 0.0, 0.25, 0.355, 0.17967171717171718, 0.1357142857142857, 0.5, 0.3, 0.022222222222222227, -0.02121212121212122, 0.5, 0.0, 0.1, 0.5, 0.09999999999999998, 0.3, 0.0, 0.0, 0.0, 0.0, 0.13714285714285715, 0.75, -0.13333333333333333, 0.13333333333333333, 0.20500000000000002, 0.016666666666666666, 0.5, 0.0, 0.3166666666666667, 0.2125, 0.0, 0.45, 0.0, 0.0, 0.0, 0.3, 0.9, 0.0, 0.0, 0.0, 0.35714285714285715, 0.25, 0.0, -0.75, 0.4, 0.0, 0.7, 0.0, 0.0, 0.0, -0.20925925925925926, 0.0, 0.25, 0.0, 0.7, 0.30000000000000004, -0.05, 0.0, 0.0, 0.8, 0.5, 0.5, 0.35714285714285715, 0.0, 0.3020408163265306, 0.0, 0.03148148148148147, -0.15555555555555559, 0.3, 0.15833333333333333, 0.05, -0.08333333333333334, 0.0, 0.5633333333333334, 0.24, 0.0, 0.5714285714285714, 0.0, 0.0, 0.02777777777777779, -0.25, 0.15, 0.17424242424242423, 0.0, 0.0, 0.0, 0.0, 0.5, 0.43, 0.0, 0.0, 0.25, 0.25, 0.25, 0.0, 0.0, 0.2, 0.2, -0.03333333333333333, 0.2, 0.35, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04545454545454545, -0.25, -0.4, 0.0, 0.0, 0.1, -0.125, 0.0, 0.16666666666666666, 0.0, 0.0, 0.5, 0.0)
qplot(x=1:length(polarity), y=polarity, geom="bar", xlab="", ylab="polarity", main="Sentiment of Speech")
plot_len=length(polarity) *10
p <- qplot(,polarity)
p + geom_line() +xlab("sentences")+ ylab("Polarity") +theme(axis.title = element_text(size = 25))+ylim(-1,1)
dev.copy(png, file="trump.png", width=plot_len, height=500)
dev.off()
polarity= c(0.13125, 0.35, 0.0, 0.4333333333333333, 0.5, 0.25, 0.0, -0.07500000000000001, 0.05000000000000002, 0.024999999999999994, -0.4, 0.0, 0.0, 0.0, 0.2393939393939394, 0.08333333333333333, 0.5, -1.0, -0.30833333333333335, 0.0, 0.0, 0.0, 0.0, 0.2, -0.03333333333333333, -0.15000000000000002, 0.0, 0.5, 0.0, 0.012499999999999983, 0.0, 0.2, 0.5666666666666668, 0.0, 0.26)
qplot(x=1:length(polarity), y=polarity, geom="bar", xlab="", ylab="polarity", main="Sentiment of Speech")
plot_len=length(polarity) *10
p <- qplot(,polarity)
p + geom_line() +xlab("sentences")+ ylab("Polarity") +theme(axis.title = element_text(size = 25))+ylim(-1,1)
dev.copy(png, file="charlottesville.png", width=plot_len, height=500)
dev.off()
Char= c(0.13125, 0.35, 0.0, 0.4333333333333333, 0.5, 0.25, 0.0, -0.07500000000000001, 0.05000000000000002, 0.024999999999999994, -0.4, 0.0, 0.0, 0.0, 0.2393939393939394, 0.08333333333333333, 0.5, -1.0, -0.30833333333333335, 0.0, 0.0, 0.0, 0.0, 0.2, -0.03333333333333333, -0.15000000000000002, 0.0, 0.5, 0.0, 0.012499999999999983, 0.0, 0.2, 0.5666666666666668, 0.0, 0.26)
min(Char)
Char[17]
Char[18]
set.seed(1938)
a2 <- data.frame(year = seq(0,100,length.out=1000), values = cumsum(rnorm(1000)))
ggplot(a2, aes(x = year, y = values, color = values )) +
geom_line(size = 0.5)  +
geom_smooth(aes(color=..y..), size=1.5, se=FALSE) +
scale_colour_gradient2(low = "blue", mid = "yellow" , high = "red",
midpoint=median(a2$values)) +
theme_bw()
p
p+geom_smooth(aes(color=..y..), size=1.5, se=FALSE)
p+scale_colour_gradient2(low = "blue", mid = "yellow" , high = "red",midpoint=median(polarity))
p+scale_colour_gradient2(low = "blue", mid = "yellow" , high = "red",midpoint=median(polarity)) + theme_bw()
p+geom_line(size = 0.5)+scale_colour_gradient2(low = "blue", mid = "yellow" , high = "red",midpoint=median(polarity)) + theme_bw()
p <- qplot(,polarity)
p+geom_line(size = 0.5)+scale_colour_gradient2(low = "blue", mid = "yellow" , high = "red",midpoint=median(polarity)) + theme_bw()
p+geom_line(size = 0.5)+color(polarity)+scale_colour_gradient2(low = "blue", mid = "yellow" , high = "red",midpoint=median(polarity)) + theme_bw()
ggplot(polarity, aes(x = 1:length(polarity), y = polarity, color = polarity )) +
geom_line(size = 0.5)  +
geom_smooth(aes(color=..y..), size=1.5, se=FALSE) +
scale_colour_gradient2(low = "blue", mid = "yellow" , high = "red",midpoint=median(polarity)) +
theme_bw()
polarity_df <- data.frame(vec=polarity)
View(polarity_df)
ggplot(polarity_df, aes( y = vec, color = vec )) +
geom_line(size = 0.5)  +
scale_colour_gradient2(low = "blue", mid = "yellow" , high = "red",midpoint=median(polarity_df$vec)) +
theme_bw()
ggplot(polarity_df, aes( x=1:35,y = vec, color = vec )) +
geom_line(size = 0.5)  +
scale_colour_gradient2(low = "blue", mid = "yellow" , high = "red",midpoint=median(polarity_df$vec)) +
theme_bw()
ggplot(polarity_df, aes( x=1:35,y = vec, color = vec )) +
geom_line(size = 0.5)  +
scale_colour_gradient2(low = "red", mid = "yellow" , high = "blue",midpoint=median(polarity_df$vec)) +
theme_bw()
ggplot(polarity_df, aes( x=1:35,y = vec, color = vec )) +
geom_line(size = 0.5)  +
scale_colour_gradient2(low = "red", mid = "yellow" , high = "blue",midpoint=0.0) +
theme_bw()
ggplot(polarity_df, aes( x=1:35,y = vec, color = vec )) +
geom_line(size = 0.5)
library("RODBC")
# create a connection
bcp <- odbcConnect("bcpittags", uid="daver", pwd="********")
bcp <- odbcConnect("testserver", uid="sa", pwd="P@55w0rd")
warnings()
install.packages("RODBC", type = "source")
library("RODBC")
bcp <- odbcConnect("testserver", uid="sa", pwd="P@55w0rd")
View(df)
install.package("RJDBC")
install.packages("RJDBC")
library(RJDBC)
drv <- JDBC('com.microsoft.sqlserver.jdbc.SQLServerDriver', '/usr/local/project/dataproviders/jdbc/sqljdbc4.jar', identifier.quote="'")
install.packages("rJava")
install.packages("DBI")
install.packages("DBI")
library(RJDBC)
library(DBI)
library(rJava)
apt-get install r-cran-rjava
library(rJava)
install.packages("rJava")
library(rJava)
require("rjava")
require("rJava")
load(rJava)
install.packages("rJava")
load(rJava)
require("rJava")
install.packages("RODBC")
library(RODBC)
myConn <-odbcDriverConnect("driver={TDSdriver};DSN=testserver;UID=sa;PWD=P@55w0rd;")
myConn <-odbcDriverConnect("driver={/usr/local/lib/libtdsodbc.so};DSN=testserver;UID=sa;PWD=P@55w0rd;")
install.packages("RODBC", type = "source")
install.packages("RODBC", type = "source")
library("RODBC")
bcp <- odbcConnect("testserver", uid="sa", pwd="P@55w0rd")
library("RODBC")
df
pairs(df)
pairs(DT)
pairs(test)
pairs(dframe)
library(datasets)
data("airquality")
pairs(airquality)
setwd("~/Documents/coursera/Reproducible_research_pro1_week2")
rm(list = ls())
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",destfile='data')
unzip ("data", exdir = "./")
activity_data = read.csv("activity.csv")
View(activity_data)
activity_data$date <- as.Date(activity_datya$date)
activity_data$date <- as.Date(activity_data$date)
clean_data <- activity[!is.na(activity_data$steps),]
clean_data <- activity_data[!is.na(activity_data$steps),]
View(clean_data)
## summarizing total steps per date
sumTable <- aggregate(activity_data$steps ~ activity_data$date, FUN=sum, )
View(sumTable)
View(sumTable)
View(clean_data)
## summarizing total steps per date
sumTable2 <- aggregate(clean_data$steps ~ clean_data$date, FUN=sum, )
hist(activity_data$steps, main = paste("Global Active Power"), col="red", xlab="Global Active Power (kilowatts)")
View(sumTable)
sumTable3 <- aggregate(activity_data$steps,by=list(activity_data$date), FUN=sum)
View(sumTable3)
View(sumTable3)
View(sumTable3)
View(sumTable2)
View(sumTable3)
sumTable3 <- aggregate(activity_data$steps,by=list(date=activity_data$date), FUN=sum)
View(sumTable3)
sumTable3 <- aggregate(list(steps=activity_data$steps),by=list(date=activity_data$date), FUN=sum)
View(sumTable3)
sumTable3 <- aggregate(list(steps=activity_data$steps),by=list(date=activity_data$date), FUN=sum, na.rm =TRUE)
View(sumTable3)
hist(sumTable3$steps, breaks=20, xlab="Steps", main = "Total Steps per Day")
hist(sumTable3$steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
sumTable4 <- aggregate(clean_data$steps,by=list(date=clean_data$date), FUN=sum)
hist(sumTable4$steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
sumTable <- aggregate(list(steps=activity_data$steps) ~ list(date=activity_data$date), FUN=sum, )
sumTable4 <- aggregate(list(steps=clean_data$steps),by=list(date=clean_data$date), FUN=sum)
hist(sumTable4$steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
hist(sumTable4$steps, breaks=20, xlab="Steps", main = "Total Steps per Day")
hist(sumTable4$steps, breaks=10, xlab="Steps", main = "Total Steps per Day")
View(activity_data)
sumTable <- aggregate(list(steps=clean_data$steps),by=list(date=clean_data$date), FUN=sum)
hist(sumTable4$steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
Median_steps <- median(sumTable$steps)
Median_steps
mean_steps <- mean(sumTable$steps)
mean_steps
mean(sumTable$steps)
intervals <- ddply(clean_data, .(interval), summarize, Avg = mean(steps))
library(plyr)
install.packages("plyr")
library(plyr)
intervals <- ddply(clean_data, .(interval), summarize, Avg = mean(steps))
View(intervals)
intervals <- ddply(clean_data, .(interval), summarize, average = mean(steps))
View(intervals)
p <- ggplot(intervals, aes(x=interval, y=averag), xlab = "Interval", ylab="Average Number of Steps",title="Average Number of Steps per Interval")
install.packages("ggplot2")
library(ggplot2)
p <- ggplot(intervals, aes(x=interval, y=averag))
p + geom_line() + labs(title="Average Number of Steps per Interval",y= "Average Number of Steps",x="Interval")
p <- ggplot(intervals, aes(x=interval, y=average))
p + geom_line() + labs(title="Average Number of Steps per Interval",y= "Average Number of Steps",x="Interval")
plot( intervals$interval, intervals$average, type="l")
p + geom_line() + labs(title="Average Number of Steps per Interval",y= "Average Number of Steps",x="Interval")
plot( intervals$interval, intervals$average, type="l",main="Average Number of Steps per Interval",ylab="Average Number of Steps",xlab="Interval")
View(intervals)
View(intervals)
View(clean_data)
clean_data$interval[which(clean_data$steps == max(clean_data$steps))]
intervals$interval[which(intervals$average == max(intervals$average))]
sum(is.na(activity_data$steps))
View(activity_data)
View(intervals)
activity_data2<- activity_data
activity_data2$steps[is.na(activity_data2$steps)] <- "coming"
View(activity_data2)
set.seed(3)
z=data.frame(sample(c("a","b","c","d","e"),20,replace=T))
names(z)="letter"
z$color=rep(0,dim(z)[1])
z
y1=c("a","b","c")
y2=c("red","blue","green")
y=data.frame(cbind(y1,y2))
names(y)=c("letter","color")
y
z$color<-y[match(z$letter, y$letter),2]
z
activity_data2<- activity_data
activity_data2$steps[is.na(activity_data2$steps)] <- intervals[match(activity_data2$interval,intervals$interval),2]
View(activity_data2)
View(activity_data)
View(activity_data)
total_steps <- aggregate(list(steps=activity_data2$steps),by=list(date=clean_data$date), FUN=sum)
hist(total_steps$steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
total_steps <- aggregate(list(steps=activity_data2$steps),by=list(date=activity_data2$date), FUN=sum)
hist(total_steps$steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
median(total_steps$steps)
mean(total_steps$steps)
total_steps <- aggregate(list(steps=clean_data$steps),by=list(date=clean_data$date), FUN=sum)
hist(total_steps$steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
total_steps2 <- aggregate(list(steps=activity_data2$steps),by=list(date=activity_data2$date), FUN=sum)
hist(total_steps2$steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
median(total_steps2$steps)
mean(total_steps2$steps)
View(total_steps2)
hist(total_steps2$steps, breaks=20, xlab="Steps", main = "Total Steps per Day")
hist(total_steps2$steps, breaks=50, xlab="Steps", main = "Total Steps per Day")
hist(total_steps2$steps, breaks=10, xlab="Steps", main = "Total Steps per Day")
hist(total_steps2$steps, breaks=50, xlab="Steps", main = "Total Steps per Day")
options(digits=12)
median(total_steps2$steps)
mean(total_steps2$steps)
mode(total_steps2$steps)
getmode(total_steps2$steps)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(total_steps2$steps)
weekdays("2012-10-03")
help("weekdays")
weekdays(activity_data2$date)
activity_data2$day<-weekdays(activity_data2$date)
View(activity_data2)
activity_data2$day_type<- ifelse(weekdays(activity_data2$date)%in% c('Saturday','Sunday') ,"weekend","weekday")
View(activity_data2)
activity_data2$day<-NULL
View(activity_data2)
intervals2 <- ddply(activity_data2, .(interval), summarize, average = mean(steps))
View(intervals2)
intervals2 <- ddply(activity_data2, .(interval, day_type), summarize, average = mean(steps))
View(intervals2)
xyplot(average~interval|day_type, data=intervals2 , type="l",  layout = c(1,2),
main="Average Steps per Interval Based on Type of Day",
ylab="Average Number of Steps", xlab="Interval")
library(lattice)
xyplot(average~interval|day_type, data=intervals2 , type="l",  layout = c(1,2),
main="Average Steps per Interval Based on Type of Day",
ylab="Average Number of Steps", xlab="Interval")
dev.copy(png, file="steps_weekend_weekday.png", width=480, height=480)
dev.off()
total_steps <- aggregate(list(steps=clean_data$steps),by=list(date=clean_data$date), FUN=sum)
hist(total_steps$steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
dev.copy(png, file="total_steps_per_day1.png", width=480, height=480)
dev.off()
intervals <- ddply(clean_data, .(interval), summarize, average = mean(steps))
plot( intervals$interval, intervals$average, type="l",main="Average Number of Steps per Interval",ylab="Average Number of Steps",xlab="Interval")
dev.copy(png, file="steps_per_interval.png", width=480, height=480)
dev.off()
intervals$interval[which(intervals$average == max(intervals$average))]
activity_data2<- activity_data
activity_data2$steps[is.na(activity_data2$steps)] <- intervals[match(activity_data2$interval,intervals$interval),2]
total_steps2 <- aggregate(list(steps=activity_data2$steps),by=list(date=activity_data2$date), FUN=sum)
hist(total_steps2$steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
dev.copy(png, file="total_steps_per_day2.png", width=480, height=480)
dev.off()
setwd("~/Documents/coursera/RepData_PeerAssessment1")
rm(list = ls())
activity <- read.csv(unz("activity.zip", "activity.csv"))
rm(list = ls())
activity_data  <- read.csv(unz("activity.zip", "activity.csv"))
getwd()
activity_data  <- read.csv(unz("activity.zip", "activity.csv"))
activity_data$date <- as.Date(activity_data$date)
reset (all)
options("digits")
